// Code generated by mockery v2.10.0. DO NOT EDIT.

package mocks

import (
	context "context"

	task "github.com/burntcarrot/pm/entity/task"
	mock "github.com/stretchr/testify/mock"
)

// DomainRepo is an autogenerated mock type for the DomainRepo type
type DomainRepo struct {
	mock.Mock
}

// CreateTask provides a mock function with given fields: ctx, domain
func (_m *DomainRepo) CreateTask(ctx context.Context, domain task.Domain) (task.Domain, error) {
	ret := _m.Called(ctx, domain)

	var r0 task.Domain
	if rf, ok := ret.Get(0).(func(context.Context, task.Domain) task.Domain); ok {
		r0 = rf(ctx, domain)
	} else {
		r0 = ret.Get(0).(task.Domain)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, task.Domain) error); ok {
		r1 = rf(ctx, domain)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetTaskByID provides a mock function with given fields: ctx, username, projectName, taskID
func (_m *DomainRepo) GetTaskByID(ctx context.Context, username string, projectName string, taskID string) ([]task.Domain, error) {
	ret := _m.Called(ctx, username, projectName, taskID)

	var r0 []task.Domain
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) []task.Domain); ok {
		r0 = rf(ctx, username, projectName, taskID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]task.Domain)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string, string) error); ok {
		r1 = rf(ctx, username, projectName, taskID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetTaskByName provides a mock function with given fields: ctx, username, projectName, taskName
func (_m *DomainRepo) GetTaskByName(ctx context.Context, username string, projectName string, taskName string) ([]task.Domain, error) {
	ret := _m.Called(ctx, username, projectName, taskName)

	var r0 []task.Domain
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) []task.Domain); ok {
		r0 = rf(ctx, username, projectName, taskName)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]task.Domain)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string, string) error); ok {
		r1 = rf(ctx, username, projectName, taskName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetTasks provides a mock function with given fields: ctx, username, projectName
func (_m *DomainRepo) GetTasks(ctx context.Context, username string, projectName string) ([]task.Domain, error) {
	ret := _m.Called(ctx, username, projectName)

	var r0 []task.Domain
	if rf, ok := ret.Get(0).(func(context.Context, string, string) []task.Domain); ok {
		r0 = rf(ctx, username, projectName)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]task.Domain)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, username, projectName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
